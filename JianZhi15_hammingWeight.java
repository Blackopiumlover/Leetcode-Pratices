public class JianZhi15_hammingWeight {

    public static void main(String[] args) {
        // int a = 2;
        // System.out.println(~a);
        int a = 00000000000000000000000000001011;
        int b = 00000000000000000000000010000000;
        // int c = 11111111111111111111111111111101;
        System.out.println(hammingWeight(a));
        System.out.println(hammingWeight(b));
        // System.out.println(hammingWeight(c));
    }
    public static int hammingWeight(int n){
        int result = 0;
        int count = 0;
        while(n != 0){
            result = n & 1;
            if(result == 1){
                count = count + 1;
            }
            n = n >>> 1;
            // n >>>= 1;
        }
        return count;
    }
    

    /* 
        Java 中的位运算：针对两个二进制数的位（0 或 1）进行逻辑运算
            与，非，或，异或
        1. 与 &
            两个位都是 1，结果为 1，否则结果为 0
            int a = 129;----------------------------> a = 10000001
            int b = 128;----------------------------> b = 10000000
            => a & b = 128-------------------------->     10000000 = 128

        2. 或 |
            两个位只要有一个为 1，结果为 1，否则结果为 0
            int a = 129;----------------------------> a = 10000001
            int b = 128;----------------------------> b = 10000000
            => a | b = 129-------------------------->     10000001 = 129

        3. 非 ~
            如果位为 0，结果为 1，如果位为 1，结果为 0
            int a = 2;------------------------------> a = 0010
            => ~a = -3------------------------------>     1101（负数按照补码存储）正数转负数补码，符号位从 0 变为 1，取反，加 1
                                                          符号位 1 不变，101 - 1 = 100，取反，011
                                                          正码为 1011 -> -3
        4. 异或 ^
            两个操作数的位，相同结果为 0，不同结果则为 1
            int a = 15;-----------------------------> a = 1111
            int b = 2;------------------------------> b = 0010
            => a ^ b = 13--------------------------->     1101 = 13

        移位运算符：
            移位运算符操作的对象就是二进制的位
            6297 = 1100010011001
            -6297 = 1111111111111111 1110011101100111
            1. << 左移运算符，x << 3，将 x 的二进制向左移动 3 位，低位补 0
                6297 << 5 = 110001001100100000
                -6297 << 5 = 11111111111 111001110110011100000
                x << y 相当于 x * 2 的 y 次方
            2. >> “有符号”右移运算符，x >> 3，将 x 的二进制向右移动 3 位，如果值为正，在高位补 0，如果值为负，在低位补 1
                6297 >> 5 = 00000 11000100
                -6297 >> 5 = 1111111111111111 1111111100111011
                x >> y 相当于 x / 2 的 y 次方
            3. >>> “无符号”右移运算符，x >>> 3，将 x 的二进制向右移动 3 为，无论正负，都在高位补 0
                6297 >>> 5 = 00000 11000100
                -6297 >>> 5 = 00000 1111111111111111 11100111011        
    */
}
